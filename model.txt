CVNet_Rerank(
  (encoder_q): ResNet(
    (stem): ResStemIN(
      (conv): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (pool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    )
    (s1): ResStage(
      (b1): ResBlock(
        (proj): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (f): BottleneckTransform(
          (a): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (a_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (a_relu): relup()
          (b): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (b_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (b_relu): relup()
          (c): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (c_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): relup()
        (relup): relup()
      )
      (b2): ResBlock(
        (f): BottleneckTransform(
          (a): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (a_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (a_relu): relup()
          (b): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (b_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (b_relu): relup()
          (c): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (c_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): relup()
        (relup): relup()
      )
      (b3): ResBlock(
        (f): BottleneckTransform(
          (a): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (a_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (a_relu): relup()
          (b): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (b_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (b_relu): relup()
          (c): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (c_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): relup()
        (relup): relup()
      )
    )
    (s2): ResStage(
      (b1): ResBlock(
        (proj): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (f): BottleneckTransform(
          (a): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (a_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (a_relu): relup()
          (b): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (b_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (b_relu): relup()
          (c): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (c_bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): relup()
        (relup): relup()
      )
      (b2): ResBlock(
        (f): BottleneckTransform(
          (a): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (a_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (a_relu): relup()
          (b): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (b_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (b_relu): relup()
          (c): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (c_bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): relup()
        (relup): relup()
      )
      (b3): ResBlock(
        (f): BottleneckTransform(
          (a): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (a_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (a_relu): relup()
          (b): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (b_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (b_relu): relup()
          (c): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (c_bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): relup()
        (relup): relup()
      )
      (b4): ResBlock(
        (f): BottleneckTransform(
          (a): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (a_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (a_relu): relup()
          (b): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (b_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (b_relu): relup()
          (c): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (c_bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): relup()
        (relup): relup()
      )
    )
    (s3): ResStage(
      (b1): ResBlock(
        (proj): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (f): BottleneckTransform(
          (a): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (a_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (a_relu): relup()
          (b): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (b_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (b_relu): relup()
          (c): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (c_bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): relup()
        (relup): relup()
      )
      (b2): ResBlock(
        (f): BottleneckTransform(
          (a): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (a_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (a_relu): relup()
          (b): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (b_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (b_relu): relup()
          (c): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (c_bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): relup()
        (relup): relup()
      )
      (b3): ResBlock(
        (f): BottleneckTransform(
          (a): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (a_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (a_relu): relup()
          (b): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (b_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (b_relu): relup()
          (c): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (c_bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): relup()
        (relup): relup()
      )
      (b4): ResBlock(
        (f): BottleneckTransform(
          (a): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (a_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (a_relu): relup()
          (b): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (b_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (b_relu): relup()
          (c): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (c_bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): relup()
        (relup): relup()
      )
      (b5): ResBlock(
        (f): BottleneckTransform(
          (a): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (a_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (a_relu): relup()
          (b): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (b_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (b_relu): relup()
          (c): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (c_bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): relup()
        (relup): relup()
      )
      (b6): ResBlock(
        (f): BottleneckTransform(
          (a): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (a_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (a_relu): relup()
          (b): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (b_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (b_relu): relup()
          (c): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (c_bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): relup()
        (relup): relup()
      )
    )
    (s4): ResStage(
      (b1): ResBlock(
        (proj): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (f): BottleneckTransform(
          (a): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (a_bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (a_relu): relup()
          (b): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (b_bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (b_relu): relup()
          (c): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (c_bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): relup()
        (relup): relup()
      )
      (b2): ResBlock(
        (f): BottleneckTransform(
          (a): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (a_bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (a_relu): relup()
          (b): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (b_bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (b_relu): relup()
          (c): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (c_bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): relup()
        (relup): relup()
      )
      (b3): ResBlock(
        (f): BottleneckTransform(
          (a): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (a_bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (a_relu): relup()
          (b): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (b_bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (b_relu): relup()
          (c): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (c_bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): relup()
        (relup): relup()
      )
    )
    (head): GlobalHead(
      (fc): Linear(in_features=2048, out_features=2048, bias=True)
      (pool): GeneralizedMeanPoolingP(Parameter containing:
      tensor([3.], requires_grad=True), output_size=1)
    )
    (seb1): Conv2d(2048, 512, kernel_size=(7, 7), stride=(1, 1), padding=same)
    (seb2): Conv2d(512, 2048, kernel_size=(7, 7), stride=(1, 1), padding=same)
    (sefc): Linear(in_features=2048, out_features=1, bias=True)
    (pool): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
    (rgem): rgem(
      (lppool): LPPool2d(norm_type=2.5, kernel_size=5, stride=1, ceil_mode=False)
      (pad): ReflectionPad2d((2, 2, 2, 2))
    )
    (gemp): gemp()
    (sgem): sgem()
  )
  (softmax): Softmax(dim=1)
  (conv2ds): ModuleList(
    (0-2): 3 x Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
  (cv_learner): CVLearner(
    (block1): Sequential(
      (0): CenterPivotConv4d(
        (conv1): Conv2d(9, 16, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2))
        (conv2): Conv2d(9, 16, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2))
      )
      (1): GroupNorm(4, 16, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
    )
    (block2): Sequential(
      (0): CenterPivotConv4d(
        (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (1): GroupNorm(4, 16, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): CenterPivotConv4d(
        (conv1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (conv2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (4): GroupNorm(4, 32, eps=1e-05, affine=True)
      (5): ReLU(inplace=True)
    )
    (block3): Sequential(
      (0): CenterPivotConv4d(
        (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (1): GroupNorm(4, 32, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): CenterPivotConv4d(
        (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (4): GroupNorm(4, 32, eps=1e-05, affine=True)
      (5): ReLU(inplace=True)
      (6): CenterPivotConv4d(
        (conv1): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (7): GroupNorm(4, 64, eps=1e-05, affine=True)
      (8): ReLU(inplace=True)
    )
    (block4): Sequential(
      (0): CenterPivotConv4d(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (1): GroupNorm(4, 64, eps=1e-05, affine=True)
      (2): ReLU(inplace=True)
      (3): CenterPivotConv4d(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (4): GroupNorm(4, 64, eps=1e-05, affine=True)
      (5): ReLU(inplace=True)
      (6): CenterPivotConv4d(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (7): GroupNorm(4, 128, eps=1e-05, affine=True)
      (8): ReLU(inplace=True)
    )
    (mlp): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU()
      (2): Linear(in_features=128, out_features=2, bias=True)
    )
  )
)
